# This file was auto-generated by Fern from our API Definition.

import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...environment import FernApiEnvironment
from .errors.movie_does_not_exist_error import MovieDoesNotExistError
from .types.create_movie_request import CreateMovieRequest
from .types.movie import Movie
from .types.movie_id import MovieId


class ImdbClient:
    def __init__(self, *, environment: FernApiEnvironment = FernApiEnvironment.PRODUCTION):
        self._environment = environment

    def create_movie(self, *, request: CreateMovieRequest) -> MovieId:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "movies/create-movie"),
            json=jsonable_encoder(request),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(MovieId, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_movie(self, movie_id: MovieId) -> Movie:
        _response = httpx.request(
            "GET", urllib.parse.urljoin(f"{self._environment.value}/", f"movies/{movie_id}"), timeout=60
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Movie, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise MovieDoesNotExistError()
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncImdbClient:
    def __init__(self, *, environment: FernApiEnvironment = FernApiEnvironment.PRODUCTION):
        self._environment = environment

    async def create_movie(self, *, request: CreateMovieRequest) -> MovieId:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "movies/create-movie"),
                json=jsonable_encoder(request),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(MovieId, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_movie(self, movie_id: MovieId) -> Movie:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET", urllib.parse.urljoin(f"{self._environment.value}/", f"movies/{movie_id}"), timeout=60
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Movie, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise MovieDoesNotExistError()
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
